// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: proto.proto

package proto_example

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Serv_Login_FullMethodName         = "/serv/Login"
	Serv_GetDetails_FullMethodName    = "/serv/getDetails"
	Serv_GetRisk_FullMethodName       = "/serv/getRisk"
	Serv_SendLifestyle_FullMethodName = "/serv/SendLifestyle"
)

// ServClient is the client API for Serv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServClient interface {
	Login(ctx context.Context, in *UserLogin, opts ...grpc.CallOption) (*SessionToken, error)
	GetDetails(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserDetails, error)
	GetRisk(ctx context.Context, in *SessionToken, opts ...grpc.CallOption) (*RiskScore, error)
	SendLifestyle(ctx context.Context, in *LifestyleRequest, opts ...grpc.CallOption) (*LifestyleResponse, error)
}

type servClient struct {
	cc grpc.ClientConnInterface
}

func NewServClient(cc grpc.ClientConnInterface) ServClient {
	return &servClient{cc}
}

func (c *servClient) Login(ctx context.Context, in *UserLogin, opts ...grpc.CallOption) (*SessionToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionToken)
	err := c.cc.Invoke(ctx, Serv_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servClient) GetDetails(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserDetails, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDetails)
	err := c.cc.Invoke(ctx, Serv_GetDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servClient) GetRisk(ctx context.Context, in *SessionToken, opts ...grpc.CallOption) (*RiskScore, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RiskScore)
	err := c.cc.Invoke(ctx, Serv_GetRisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servClient) SendLifestyle(ctx context.Context, in *LifestyleRequest, opts ...grpc.CallOption) (*LifestyleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LifestyleResponse)
	err := c.cc.Invoke(ctx, Serv_SendLifestyle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServServer is the server API for Serv service.
// All implementations must embed UnimplementedServServer
// for forward compatibility
type ServServer interface {
	Login(context.Context, *UserLogin) (*SessionToken, error)
	GetDetails(context.Context, *UserRequest) (*UserDetails, error)
	GetRisk(context.Context, *SessionToken) (*RiskScore, error)
	SendLifestyle(context.Context, *LifestyleRequest) (*LifestyleResponse, error)
	mustEmbedUnimplementedServServer()
}

// UnimplementedServServer must be embedded to have forward compatible implementations.
type UnimplementedServServer struct {
}

func (UnimplementedServServer) Login(context.Context, *UserLogin) (*SessionToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedServServer) GetDetails(context.Context, *UserRequest) (*UserDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}
func (UnimplementedServServer) GetRisk(context.Context, *SessionToken) (*RiskScore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRisk not implemented")
}
func (UnimplementedServServer) SendLifestyle(context.Context, *LifestyleRequest) (*LifestyleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLifestyle not implemented")
}
func (UnimplementedServServer) mustEmbedUnimplementedServServer() {}

// UnsafeServServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServServer will
// result in compilation errors.
type UnsafeServServer interface {
	mustEmbedUnimplementedServServer()
}

func RegisterServServer(s grpc.ServiceRegistrar, srv ServServer) {
	s.RegisterService(&Serv_ServiceDesc, srv)
}

func _Serv_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serv_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServServer).Login(ctx, req.(*UserLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serv_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serv_GetDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServServer).GetDetails(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serv_GetRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServServer).GetRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serv_GetRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServServer).GetRisk(ctx, req.(*SessionToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serv_SendLifestyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifestyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServServer).SendLifestyle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serv_SendLifestyle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServServer).SendLifestyle(ctx, req.(*LifestyleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Serv_ServiceDesc is the grpc.ServiceDesc for Serv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Serv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serv",
	HandlerType: (*ServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Serv_Login_Handler,
		},
		{
			MethodName: "getDetails",
			Handler:    _Serv_GetDetails_Handler,
		},
		{
			MethodName: "getRisk",
			Handler:    _Serv_GetRisk_Handler,
		},
		{
			MethodName: "SendLifestyle",
			Handler:    _Serv_SendLifestyle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}
