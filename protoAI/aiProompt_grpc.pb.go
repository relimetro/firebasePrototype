// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: aiProompt.proto

package aiProompt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AiProompt_HealtcareProompt_FullMethodName = "/aiProompt.aiProompt/HealtcareProompt"
)

// AiProomptClient is the client API for AiProompt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AiProomptClient interface {
	HealtcareProompt(ctx context.Context, in *ProomptMsg, opts ...grpc.CallOption) (*ProomptReturn, error)
}

type aiProomptClient struct {
	cc grpc.ClientConnInterface
}

func NewAiProomptClient(cc grpc.ClientConnInterface) AiProomptClient {
	return &aiProomptClient{cc}
}

func (c *aiProomptClient) HealtcareProompt(ctx context.Context, in *ProomptMsg, opts ...grpc.CallOption) (*ProomptReturn, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProomptReturn)
	err := c.cc.Invoke(ctx, AiProompt_HealtcareProompt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AiProomptServer is the server API for AiProompt service.
// All implementations must embed UnimplementedAiProomptServer
// for forward compatibility
type AiProomptServer interface {
	HealtcareProompt(context.Context, *ProomptMsg) (*ProomptReturn, error)
	mustEmbedUnimplementedAiProomptServer()
}

// UnimplementedAiProomptServer must be embedded to have forward compatible implementations.
type UnimplementedAiProomptServer struct {
}

func (UnimplementedAiProomptServer) HealtcareProompt(context.Context, *ProomptMsg) (*ProomptReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealtcareProompt not implemented")
}
func (UnimplementedAiProomptServer) mustEmbedUnimplementedAiProomptServer() {}

// UnsafeAiProomptServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AiProomptServer will
// result in compilation errors.
type UnsafeAiProomptServer interface {
	mustEmbedUnimplementedAiProomptServer()
}

func RegisterAiProomptServer(s grpc.ServiceRegistrar, srv AiProomptServer) {
	s.RegisterService(&AiProompt_ServiceDesc, srv)
}

func _AiProompt_HealtcareProompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProomptMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiProomptServer).HealtcareProompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AiProompt_HealtcareProompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiProomptServer).HealtcareProompt(ctx, req.(*ProomptMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// AiProompt_ServiceDesc is the grpc.ServiceDesc for AiProompt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AiProompt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aiProompt.aiProompt",
	HandlerType: (*AiProomptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealtcareProompt",
			Handler:    _AiProompt_HealtcareProompt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aiProompt.proto",
}
